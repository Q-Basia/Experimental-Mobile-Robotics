ROSTOPICS
/csc22926/auto_calibration_calculation_node/car_cmd
/csc22926/auto_calibration_node/car_cmd
/csc22926/button_driver_node/event
/csc22926/camera_node/camera_info
/csc22926/camera_node/image/compressed
/csc22926/car_cmd_switch_node/cmd
/csc22926/client_count
/csc22926/connected_clients
/csc22926/coordinator_node/car_cmd
/csc22926/diagnostics/code/profiling
/csc22926/diagnostics/ros/links
/csc22926/diagnostics/ros/node
/csc22926/diagnostics/ros/parameters
/csc22926/diagnostics/ros/topics
/csc22926/display_driver_node/fragments
/csc22926/duckiebot_il_lane_following/car_cmd
/csc22926/fsm_node/mode
/csc22926/imu_node/data
/csc22926/imu_node/temperature
/csc22926/joint_states
/csc22926/joy
/csc22926/joy/set_feedback
/csc22926/joy_mapper_node/car_cmd
/csc22926/joy_mapper_node/joystick_override
/csc22926/kinematics_node/velocity
/csc22926/lane_controller_node/car_cmd
/csc22926/lane_recovery_node/car_cmd
/csc22926/lane_supervisor_node/car_cmd
/csc22926/led_emitter_node/led_pattern
/csc22926/left_wheel_encoder_node/tick
/csc22926/right_wheel_encoder_node/tick
/csc22926/simple_stop_controller_node/car_cmd
/csc22926/velocity_to_pose_node/pose
/csc22926/wheels_driver_node/emergency_stop
/csc22926/wheels_driver_node/wheels_cmd
/csc22926/wheels_driver_node/wheels_cmd_executed
/diagnostics
/rosout
/rosout_agg
/tf
/tf_static

https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html

https://docs.opencv.org/4.x/dc/dbb/tutorial_py_calibration.html
We did undistortion using remapping to be able to increase fps

Undistortion images take before preprocessing
red: [0,95,108] to [8,171,255]
or [0. 84, 219] to [179,173,255]

blue: [85,110,108] to [114, 238, 210]

green: [44,56,140] to [102, 106, 188]

red: [0,121,179] to [179, 202, 255]
or [0,128, 194] to [179, 164, 255]
or [0, 131, 194] to [179, 174, 255]
or [0, 131, 189] to [179, 161, 230]


red: [0, 84, 240] to [179, 176, 255]
or [0, 118, 164] to [179, 200, 233]
or [0, 111, 162] to [179, 255, 255]
[0, 138, 230] to [179, 168, 255]

homography:
- -4.99621433668091e-05
- 0.0012704090688819693
- 0.2428235605203261
- -0.001999628080487182
- -5.849807527639727e-05
- 0.6400119336043912
- 0.0003409556379103712
- 0.0174415825291776
- -3.2316507961510252

used chatgpt to understand how services work for part 1.6 to combine previous parameters
Note that to create a custom service that exchanges custom requests and responses, must create a .srv file in your package and include it in the .xml and CMakeLists files
Always start the service server node first (lane_detection in our case)








        # control LEDs based on detected colors

        # if self.detected_lanes['red']['dimensions'][0]*self.detected_lanes['red']['dimensions'][1] > 500:
        #     # set led colors to red if red lane detected at a large size
        #     self.set_led_color([[1, 0, 0, 1],
        #                         [1, 0, 0, 1],
        #                         [1, 0, 0, 1],
        #                         [1, 0, 0, 1],
        #                         [1, 0, 0, 1],])
            
        # elif self.detected_lanes['green']['dimensions'][0]*self.detected_lanes['green']['dimensions'][1] > 500:
        #     # set led colors to green if green lane detected at a large size
        #     self.set_led_color([[0, 1, 0, 1],
        #                         [0, 1, 0, 1],
        #                         [0, 1, 0, 1],
        #                         [0, 1, 0, 1],
        #                         [0, 1, 0, 1],])
            
        # elif self.detected_lanes['blue']['dimensions'][0]*self.detected_lanes['blue']['dimensions'][1] > 500:
        #     # set led colors to blue if blue lane detected at a large size
        #     self.set_led_color([[0, 0, 1, 1],
        #                         [0, 0, 1, 1],
        #                         [0, 0, 1, 1],
        #                         [0, 0, 1, 1],
        #                         [0, 0, 1, 1],])